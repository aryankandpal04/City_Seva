rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Global function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Global function to check if user is an admin
    function isAdmin() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Global function to check if user is an official
    function isOfficial() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'official';
    }
    
    // Global function to check if the authenticated user is the owner of a document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Users collection rules
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAdmin() || isOwner(userId);
      allow delete: if isAdmin();
    }
    
    // Categories collection rules
    match /categories/{categoryId} {
      allow read: if true;  // Anyone can read categories
      allow write: if isAdmin();  // Only admins can create, update, delete
    }
    
    // Complaints collection rules
    match /complaints/{complaintId} {
      allow read: if true;  // Anyone can read complaints
      allow create: if isAuthenticated();
      allow update: if isAdmin() || isOfficial() || 
        (isOwner(resource.data.user_id) && resource.data.status == 'pending');
      allow delete: if isAdmin();
    }
    
    // Feedbacks collection rules
    match /feedbacks/{feedbackId} {
      allow read: if true;
      allow create: if isAuthenticated() && 
        exists(/databases/$(database)/documents/complaints/$(request.resource.data.complaint_id));
      allow update: if isAdmin() || isOwner(resource.data.user_id);
      allow delete: if isAdmin();
    }
    
    // Notifications collection rules
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && isOwner(resource.data.user_id);
      allow create: if isAdmin() || isOfficial();
      allow update: if isAuthenticated() && isOwner(resource.data.user_id);
      allow delete: if isAdmin() || isOwner(resource.data.user_id);
    }
    
    // Official Requests collection rules
    match /official_requests/{requestId} {
      allow read: if isAdmin() || isOwner(resource.data.user_id);
      allow create: if isAuthenticated();
      allow update: if isAdmin() || (isOwner(resource.data.user_id) && resource.data.status == 'pending');
      allow delete: if isAdmin();
    }
    
    // Complaint Updates collection rules
    match /complaint_updates/{updateId} {
      allow read: if true;
      allow create: if isAdmin() || isOfficial() || 
        (isAuthenticated() && exists(/databases/$(database)/documents/complaints/$(request.resource.data.complaint_id)));
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
    
    // Audit Logs collection rules
    match /audit_logs/{logId} {
      allow read: if isAdmin();
      allow write: if isAdmin() || isOfficial();
    }
  }
} 